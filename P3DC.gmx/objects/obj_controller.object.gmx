<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_info();
show_debug_message('1');
p3dc_init();
//Init variables for moving
z=50;
zdir=0;
zspeed=0;
zprevious=50;
accelerate=0;

//Init 3D
d3d_start();
d3d_set_hidden(1);
draw_set_color(c_white);

//Create a player collision model
player_colid=p3dc_begin_model();
p3dc_add_block(-1.4,-1.4,0,1.4,1.4,5);
p3dc_end_model();

tex_wall=background_get_texture(bck_wall);//get the id of the background, for drawing the level

//Load the 3d model into p3dc (the collisions)
level_colid=p3dc_begin_model();
p3dc_add_model("models\map_model.d3d",0,0,0);
p3dc_end_model();

p3dc_split_model(level_colid,1000,1000,50,50,5);

//Load the 3d model into GM (for drawing
mod_level=d3d_model_create();
d3d_model_load(mod_level,"models\map_model.d3d");

show_debug_message('Complete');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collision Checking + Smooth Reactions//

var tox,toy;
tox=x;
toy=y;
x=xprevious;
y=yprevious;
tdir=point_direction(x,y,tox,toy);
tdist=point_distance(x,y,tox,toy);
show_debug_message('es1');
//Accelerated Collisions
if(p3dc_check_split(player_colid,tox,toy,z-3)==1){
                                                  show_debug_message('es2');
    if(p3dc_check_split(player_colid,x+lengthdir_x(0.2,tdir),y,z-3)==0){
    x+=lengthdir_x(0.2,tdir);
    }
    if(p3dc_check_split(player_colid,x,y+lengthdir_y(0.2,tdir),z-3)==0){
    y+=lengthdir_y(0.2,tdir);
    }
    show_debug_message('es3');
}else{
x=tox;
y=toy;
}
z-=zspeed;
show_debug_message('es123');
//Accelerated Collisions

zref=min(p3dc_ray_split(x-1.3,y-1.3,z,0,0,-1),
p3dc_ray_split(x-1.3,y+1.3,z,0,0,-1),
p3dc_ray_split(x+1.3,y-1.3,z,0,0,-1),
p3dc_ray_split(x+1.3,y+1.3,z,0,0,-1));
show_debug_message('es21');
if(zref&lt;=5){
    if(zspeed&lt;=0){
    zref=zprevious-4;
    zspeed=1;
    z=zprevious-1;
    }else{
    z=5+z-zref;
    zspeed=1;
    }
}else{
zspeed+=0.075;
}

zprevious=z;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//MOVING AROUND/FORCING INSIDE THE ROOM//
room_caption=string(fps)+" / "+string(room_speed) + " - REAL: "+ string(fps_real);


//MOUSELOOK
var sw,sh;
sw=display_get_width()/2;
sh=display_get_height()/2;
direction += (sw-display_mouse_get_x())/4;
zdir += (sh-display_mouse_get_y())/4;
display_mouse_set(sw,sh);
zdir=min(max(zdir,-70),85);

//MOVE
if(keyboard_check(vk_left) or keyboard_check(ord('A'))){
x+=lengthdir_x(0.4*(keyboard_check(vk_shift)+1),direction+90);
y+=lengthdir_y(0.4*(keyboard_check(vk_shift)+1),direction+90);
}
if(keyboard_check(vk_right) or keyboard_check(ord('D'))){
x+=lengthdir_x(0.4*(keyboard_check(vk_shift)+1),direction-90);
y+=lengthdir_y(0.4*(keyboard_check(vk_shift)+1),direction-90);
}
if(keyboard_check(vk_up) or keyboard_check(ord('W'))){
x+=lengthdir_x(0.4*(keyboard_check(vk_shift)+1),direction);
y+=lengthdir_y(0.4*(keyboard_check(vk_shift)+1),direction);
}
if(keyboard_check(vk_down) or keyboard_check(ord('S'))){
x+=lengthdir_x(0.4*(keyboard_check(vk_shift)+1),direction-180);
y+=lengthdir_y(0.4*(keyboard_check(vk_shift)+1),direction-180);
}

//Force inside the room
if(x&lt;4){
x=xprevious;
}
if(y&lt;4){
y=yprevious;
}
if(x&gt;room_width-4){
x=room_width-4;
}
if(y&gt;room_height-4){
y=room_height-4;
}

show_debug_message('Step');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xd,yd,zd,dis,xp,yp,zp,i;
xd=cos(degtorad(direction))*cos(degtorad(zdir));
yd=-sin(degtorad(direction))*cos(degtorad(zdir));
zd=sin(degtorad(zdir));
dis=p3dc_ray_still(level_colid,x,y,z,xd,yd,zd);
if dis==10000000 exit;
xp=dis*xd;
yp=dis*yd;
zp=z+zd*dis;

repeat(10){
i=instance_create(x+xp,y+yp,obj_spark);
i.z=zp;
i.direction=random(360);
i.speed=random(1);
i.zspeed=1-random(2);
}

//Lift the cordinates that we hit the wall at off the wall slightly (prevents zfighting)
xp=(dis-.1)*xd;
yp=(dis-.1)*yd;
zp=z+zd*(dis-.1);
//Create the bullethole
i=instance_create(x+xp,y+yp,obj_bullethole);
i.z=zp;
i.zspeed=1-random(2);
//Give it the correct rotation
i.rotx=radtodeg(arccos(p3dc_triangle_data(9)));
i.roty=radtodeg(arcsin(p3dc_triangle_data(10)));
i.rotz=radtodeg(arcsin(p3dc_triangle_data(11)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//***This is all that is needed to draw the 3D!***//
var x1,x2,x2,y1,y2,y3,z1,z2,z3;
//Draw the 3D projection
d3d_set_projection_ext(x,y,z,
x+cos(degtorad(direction))*cos(degtorad(zdir)),
y-sin(degtorad(direction))*cos(degtorad(zdir)),
z+sin(degtorad(zdir)),0,0,1,45,view_wview[0]/view_hview[0],1,262144);
d3d_set_culling(1);
//Draw the level
texture_set_repeat(1);//ortho resets this, so we need to reset it every step
d3d_model_draw(mod_level,0,0,0,tex_wall);

d3d_set_culling(0);

//DRAW THE SPARKS
with(obj_spark){
    draw_set_color(color);
    d3d_draw_block(x-.2,y-.2,z-.2,x+.2,y+.2,z+.2,-1,1,1);
}
draw_set_color(c_white);

//DRAW THE BULLET HOLES
with(obj_bullethole){

    draw_set_alpha_test(true);
    draw_set_alpha_test_ref_value(128);
    d3d_transform_set_rotation_axis(0,rotz,-roty,rotx);
    d3d_transform_add_translation(x,y,z);
    d3d_draw_wall(0,-2,-2,0,2,2,tex_hole,1,1);
    d3d_transform_set_identity();
    draw_set_alpha_test(false);
}
d3d_set_depth(1);
//Draw the 2D
d3d_set_projection_ortho(0,0,room_width,room_height,0);
d3d_set_hidden(0);
draw_set_font(fnt_main);
draw_text(20,20,string(room_caption)+"#Press P to Cap/Uncap the room speed#Press the left mouse button to shoot");
d3d_set_hidden(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_speed == 60 {
room_speed=6000;
exit;
}
room_speed=60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if zspeed==1 zspeed=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
